/**
 * 1、目的：提高程序的运行效率，把复制对象变成移动对象，从而提高程序的运行效率
 * 2、复制对象：如对象A，这个对象对应一段内存，里面保存着各种成员数据。如果要把对象A复制
 *    给对象B，则要给B分配内存，并把对象A里面的数据逐个往对象B里复制，这需要写拷贝构造函数，
 *    或者拷贝赋值运算符。但显然，复制对象效率很低，因为要给B开辟内存，还要把A的数据往B里复制，
 *    效率肯定高不了。
 * 3、移动对象：假设对象A不再使用了，那么就可以把对象A里面有一些如用new分配的内存块的所有权转给对象B，
 *    这样B就不用new出一些内存块了，把对象A中new的内存块直接转给B，然后对象A再把指向这些内存块的指针
 *    清空一下（因为这个内存属于B，A就应该切断和这些内存块的联系）。
 * 4、当定义一个对象并用另外一个同类型对象初始化时，系统会调用拷贝构造函数；当用另外一个对象赋值时，系统
 *    会调用拷贝赋值运算符。
 * 5、std::move()：把一个左值强制转换成一个右值，带来的结果就是一个右值引用可以绑到这个转换的右值上去。
 * 6、临时对象
 * 7、
 * 8、
 * 
 */

#include <iostream>
#include <memory>

using namespace std;


int main ()
{
    cout << "hello right value ref!" << endl;
    return 0;
}